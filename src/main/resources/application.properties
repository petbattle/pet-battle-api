# configure the MongoDB client for a single node cluster on localhost
%prod.quarkus.mongodb.connection-string = mongodb://${DATABASE_USER}:${DATABASE_PASSWORD}@${DATABASE_SERVICE_HOST}:${DATABASE_SERVICE_PORT}/${DATABASE_NAME}
quarkus.mongodb.connection-string = mongodb://localhost:27017
quarkus.mongodb.devservices.enabled=false
# mandatory if you don't specify the name of the database using @MongoEntity
quarkus.mongodb.database = cats
quarkus.http.cors=true
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.theme=material
quarkus.banner.path=banner.txt

# metrics
quarkus.micrometer.enabled=true
quarkus.micrometer.registry-enabled-default=true
quarkus.micrometer.binder-enabled-default=true
quarkus.micrometer.binder.jvm=true
quarkus.micrometer.binder.system=true
quarkus.micrometer.export.prometheus.path=/metrics
quarkus.mongodb.metrics.enabled=true

# http2 support over ssl port
quarkus.ssl.native=true
quarkus.http.http2=true
quarkus.http.port=8080
quarkus.http.ssl-port=8443
quarkus.http.ssl.certificate.key-store-file=keystore.jks

quarkus.native.additional-build-args=-H:ResourceConfigurationFiles=resources-config.json

# openshift/kubernetes build and deployment configuration using dekorate
#quarkus.kubernetes.deployment-target=openshift
#quarkus.kubernetes.part-of=cats
#quarkus.kubernetes.name=cats
#quarkus.kubernetes.labels.app=cats
#quarkus.kubernetes.version=latest
#quarkus.kubernetes.image-pull-policy=Always
#quarkus.kubernetes.replicas=1
#quarkus.kubernetes.readiness-probe.initial-delay=0s
#quarkus.kubernetes.readiness-probe.period=10s
# image name
#quarkus.container-image.group=cats
#quarkus.container-image.name=cats
#quarkus.container-image.tag=latest
#quarkus.s2i.base-jvm-image=quay.io/quarkus/ubi-quarkus-native-s2i:20.0.0

# logging configuration
quarkus.log.level=INFO
quarkus.log.console.enable=true
#quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n
quarkus.log.console.color=false
%dev.quarkus.log.console.color=true
%test.quarkus.log.console.color=false
%test.quarkus.log.level=INFO

# rest client nsff (not safe for families)
app.petbattle.rest.client.NSFFService/mp-rest/scope=javax.inject.Singleton
app.petbattle.rest.client.NSFFService/mp-rest/url=http://localhost:5000
#app.petbattle.rest.client.NSFFService/mp-rest/url=http://tensorflowserving-pet-battle-nsff-pb.apps.hivec.sandbox1249.opentlc.com
app.petbattle.nsff.enabled=false
# images with a nsff prediction greater that this will be rejected
app.petbattle.nsff.limit=0.6
%prod.app.petbattle.rest.client.NSFFService/mp-rest/url=http://${NSFF_API_SERVICE_HOST}:${NSFF_API_SERVICE_PORT}
%prod.app.petbattle.nsff.enabled=${NSFF_API_SERVICE_ENABLED}
%prod.app.petbattle.nsff.limit=${NSFF_LIMIT}
